sd(x)/abs(mean(x))
}
cv(lavoro)
cv(famiglia)
cv(studio)
cv(asilo)
cv(altro)
skw <- function(x){
n <- length(x)
m2 <- (n-1)*var(x)/n
m3 <- (sum((x-mean(x))^3))/n
m3/(m2^1.5)
}
skw(lavoro)
skw(famiglia)
skw(studio)
skw(asilo)
skw(altro)
curt <- function(x){
n<-length(x)
m2<-(n-1)*var(x)/n
m4<-(sum((x-mean(x))^4))/n
m4/(m2^2) - 3
}
curt(lavoro)
curt(famiglia)
curt(studio)
curt(asilo)
curt(altro)
plot(famiglia, asilo, main="Asilo in funzione di famiglia",
xlab="Famiglia", ylab = "Asilo")
abline(v=median(famiglia), lty=1, col="magenta")
abline(v=mean(famiglia), lty=2, col="blue")
abline(h=median(asilo), lty=1, col="magenta")
abline(h=mean(asilo), lty=2, col="blue")
cov(famiglia, asilo)
cor(famiglia, asilo)
plot(famiglia, asilo, main = "Retta di regressione",
xlab="Famiglia", ylab="Asilo", col="red")
abline(lm(asilo~famiglia), col="blue")
beta <- (sd(asilo)/sd(famiglia)) * cor(famiglia,asilo)
alpha <- mean(asilo) - beta*mean(famiglia)
c(alpha,beta)
linearmodel <- lm(asilo~famiglia)
linearmodel
fitted(lm(asilo~famiglia))
resid(lm(asilo~famiglia))
linearmodel$residuals
median(linearmodel$residuals)
var(linearmodel$residuals)
sd(linearmodel$residuals)
plot(famiglia, asilo, main = "Retta di regressione",
xlab="Famiglia", ylab="Asilo", col="red")
abline(lm(asilo~famiglia), col="blue")
stime <- fitted(lm(asilo~famiglia))
segments(famiglia, stime, famiglia, asilo, col="magenta")
residui <- resid(lm(asilo~famiglia))
plot(famiglia, residui, main = "Diagramma dei residui",
xlab="Famiglia", ylab="Residui", pch=9, col="red")
abline(h=0, col="blue", lty=2)
residuistandard <- residui/sd(residui)
residuistandard
plot(stime, residuistandard,
main = "Residui standard rispetto ai valori stimati",
xlab="Valori stimati", ylab="Residui standard",
pch=5, col="red")
abline(h=0, col="blue", lty=2)
(cor(famiglia, asilo))^2
summary(lm(asilo~famiglia))$r.square
cov(motivi)
cor(motivi)
multiplelinearmodel <- lm(lavoro ~ famiglia + studio + asilo + altro)
multiplelinearmodel$coefficients
stimemult <- fitted(lm(lavoro ~ famiglia + studio + asilo + altro))
stimemult
residuimult <- resid(lm(lavoro ~ famiglia + studio + asilo + altro))
residuimult
median(multiplelinearmodel$residuals)
var(multiplelinearmodel$residuals)
sd(multiplelinearmodel$residuals)
residuimultstandard <- residuimult/sd(residuimult)
residuimultstandard
plot(stimemult,residuimultstandard,
main="Residui standard rispetto ai valori stimati",
ylab="Residui standard", xlab="Valori Stimati",
pch=5, col="red")
abline(h=0, col="blue", lty=2)
summary(lm(lavoro ~ famiglia+studio+asilo+altro))$r.square
plot(lavoro, asilo, main="Scatterplot", xlab="Lavoro", ylab="Asilo")
summary(lm(asilo ~ lavoro))$r.square
pol <- lm(asilo~lavoro+I(lavoro^2))
pol
alphapol <- pol$coefficients[[1]]
betapol <- pol$coefficients[[2]]
gammapol <- pol$coefficients[[3]]
c(alphapol, betapol, gammapol)
summary(lm(asilo~lavoro+I(lavoro^2)))$r.square
plot(lavoro, asilo, main="Scatterplot con curva",
xlab="Lavoro", ylab="Asilo", col = "red")
curve(alphapol+betapol*x+gammapol*x^2, add = TRUE)
tabellaScalata <- scale(tabella)
tabellaScalata
dist(tabella, method="euclidean", diag=FALSE, upper=FALSE)
x <- tabella[1:5, 1:5]
x
dist(x, method = "manhattan", diag = FALSE, upper=FALSE)
dist(x, method = "maximum", diag = FALSE, upper=FALSE)
dist(x, method = "minkowski", 4, diag = FALSE, upper=FALSE)
dist(x, method = "canberra", diag = FALSE, upper=FALSE)
km <- kmeans(tabella, centers = 4, iter.max = 25, nstart = 10)
km
km$totss
km$tot.withinss
km$betweenss
km$betweenss/km$totss
d<-dist(tabella, method="euclidean", diag = TRUE, upper = TRUE)
d2 <- d^2
tree <- hclust(d2, method = "centroid")
taglio <- cutree(tree, k = 4, h = NULL)
tagliolist <- list(taglio)
centroidiIniziali <- aggregate(tabella, tagliolist, mean)[,-1]
kmeans(tabella, centers = centroidiIniziali, iter.max = 25)
d <- dist(tabella, method = "euclidean", diag = TRUE, upper = FALSE)
hls <- hclust(d, method = "single")
str(hls)
plot(hls, hang = -1, xlab = "Metodo gerarchico agglomerativo",
sub="del legame singolo")
axis(side = 4, at= round(c(0, hls$height), 2))
plot(c(0, hls$height), seq(20, 1), type = "b", main = "screeplot",
xlab = "Distanza di aggregazione", ylab = "Numero di cluster", col = "red")
hls$height
plot(hls, hang = -1, xlab = "Metodo gerarchico agglomerativo",
sub="del legame singolo")
axis(side = 4, at= round(c(0, hls$height), 2))
rect.hclust(hls, k=2)
cutree(hls, k=2)
n <- nrow(tabella)
trHI <- (n-1) * sum(apply(tabella, 2, var))
trHI
d <- dist(tabella, method="euclidean", diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "single")
taglio <-cutree(tree, k=2, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trS <- trH1 + trH2
trB <- trHI-trH1-trH2
trB
trB/trHI
d <- dist(tabella, method="euclidean", diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "single")
taglio <-cutree(tree, k=3, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trH3<-(num[[3]]-1) * sum(agvar[3,])
if(is.na(trH3))
trH3 <- 0
trS <- trH1 + trH2 + trH3
trB <- trHI-trH1-trH2-trH3
trB/trHI
d <- dist(tabella, method="euclidean", diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "single")
taglio <-cutree(tree, k=4, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trH3<-(num[[3]]-1) * sum(agvar[3,])
if(is.na(trH3))
trH3 <- 0
trH4<-(num[[4]]-1) * sum(agvar[4,])
if(is.na(trH4))
trH4 <- 0
trS <- trH1 + trH2 + trH3 + trH4
trB <- trHI-trH1-trH2-trH3-trH4
trB/trHI
d <- dist(tabella, method = "euclidean",
diag = TRUE, upper = FALSE)
hlc <- hclust(d, method = "complete")
str(hlc)
plot(hlc, hang = -1, xlab = "Metodo gerarchico agglomerativo",
sub="del legame completo")
axis(side = 4, at= round(c(0, hlc$height), 2))
plot(c(0, hlc$height), seq(20, 1), type = "b",
main = "screeplot", xlab = "Distanza di aggregazione",
ylab = "Numero di cluster", col = "red")
hlc$height
plot(hlc, hang = -1, xlab = "Metodo gerarchico agglomerativo",
sub="del legame completo")
axis(side = 4, at= round(c(0, hlc$height), 2))
rect.hclust(hlc, k=2)
cutree(hlc, k=2)
d <- dist(tabella, method="euclidean",
diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "complete")
taglio <-cutree(tree, k=2, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trS <- trH1 + trH2
trB <- trHI-trH1-trH2
trB/trHI
d <- dist(tabella, method="euclidean",
diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "complete")
taglio <-cutree(tree, k=3, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trH3<-(num[[3]]-1) * sum(agvar[3,])
if(is.na(trH3))
trH3 <- 0
trS <- trH1 + trH2 + trH3
trB <- trHI-trH1-trH2-trH3
trB/trHI
d <- dist(tabella, method="euclidean",
diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "complete")
taglio <-cutree(tree, k=4, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trH3<-(num[[3]]-1) * sum(agvar[3,])
if(is.na(trH3))
trH3 <- 0
trH4<-(num[[4]]-1) * sum(agvar[4,])
if(is.na(trH4))
trH4 <- 0
trS <- trH1 + trH2 + trH3 + trH4
trB <- trHI-trH1-trH2-trH3-trH4
trB/trHI
cutree(hlc, k=4, h=NULL)
d <- dist(tabella, method = "euclidean",
diag = TRUE, upper = FALSE)
hlm <- hclust(d, method = "average")
str(hlm)
plot(hlm, hang = -1, xlab = "Metodo gerarchico agglomerativo",
sub="del legame medio")
axis(side = 4, at= round(c(0, hlm$height), 2))
plot(c(0, hlm$height), seq(20, 1), type = "b",
main = "screeplot", xlab = "Distanza di aggregazione",
ylab = "Numero di cluster", col = "red")
hlm$height
plot(hlm, hang = -1, xlab = "Metodo gerarchico agglomerativo",
sub="del legame medio")
axis(side = 4, at= round(c(0, hlm$height), 2))
rect.hclust(hlm, k=2)
cutree(hlm, k=2)
d <- dist(tabella, method="euclidean",
diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "average")
taglio <-cutree(tree, k=2, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trS <- trH1 + trH2
trB <- trHI-trH1-trH2
trB/trHI
d <- dist(tabella, method="euclidean",
diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "average")
taglio <-cutree(tree, k=3, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trH3<-(num[[3]]-1) * sum(agvar[3,])
if(is.na(trH3))
trH3 <- 0
trS <- trH1 + trH2 + trH3
trB <- trHI-trH1-trH2-trH3
trB/trHI
d <- dist(tabella, method="euclidean",
diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "average")
taglio <-cutree(tree, k=4, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trH3<-(num[[3]]-1) * sum(agvar[3,])
if(is.na(trH3))
trH3 <- 0
trH4<-(num[[4]]-1) * sum(agvar[4,])
if(is.na(trH4))
trH4 <- 0
trS <- trH1 + trH2 + trH3 + trH4
trB <- trHI-trH1-trH2-trH3-trH4
trB/trHI
cutree(hlm, k=4, h=NULL)
d <- dist(tabella, method = "euclidean",
diag = TRUE, upper = FALSE)
d2 <- d^2
hlcentroid <- hclust(d2, method = "centroid")
str(hlcentroid)
plot(hlcentroid, hang = -1, xlab = "Metodo gerarchico agglomerativo",
sub="del centroide")
axis(side = 4, at= round(c(0, hlcentroid$height), 2))
d <- dist(tabella, method="euclidean",
diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "centroid")
taglio <-cutree(tree, k=2, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trS <- trH1 + trH2
trB <- trHI-trH1-trH2
trB/trHI
d <- dist(tabella, method="euclidean",
diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "centroid")
taglio <-cutree(tree, k=3, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trH3<-(num[[3]]-1) * sum(agvar[3,])
if(is.na(trH3))
trH3 <- 0
trS <- trH1 + trH2 + trH3
trB <- trHI-trH1-trH2-trH3
trB/trHI
d <- dist(tabella, method="euclidean",
diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "centroid")
taglio <-cutree(tree, k=4, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trH3<-(num[[3]]-1) * sum(agvar[3,])
if(is.na(trH3))
trH3 <- 0
trH4<-(num[[4]]-1) * sum(agvar[4,])
if(is.na(trH4))
trH4 <- 0
trS <- trH1 + trH2 + trH3 + trH4
trB <- trHI-trH1-trH2-trH3-trH4
trB/trHI
cutree(hlm, k=4, h=NULL)
d <- dist(tabella, method = "euclidean",
diag = TRUE, upper = FALSE)
d2 <- d^2
hlmedian <- hclust(d2, method = "median")
str(hlmedian)
plot(hlmedian, hang = -1, xlab = "Metodo gerarchico agglomerativo",
sub="della mediana")
axis(side = 4, at= round(c(0, hlmedian$height), 2))
d <- dist(tabella, method="euclidean",
diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "median")
taglio <-cutree(tree, k=2, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trS <- trH1 + trH2
trB <- trHI-trH1-trH2
trB/trHI
d <- dist(tabella, method="euclidean",
diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "median")
taglio <-cutree(tree, k=3, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trH3<-(num[[3]]-1) * sum(agvar[3,])
if(is.na(trH3))
trH3 <- 0
trS <- trH1 + trH2 + trH3
trB <- trHI-trH1-trH2-trH3
trB/trHI
d <- dist(tabella, method="euclidean",
diag = TRUE, upper=TRUE)
d2<-d^2
tree <- hclust(d2, method = "median")
taglio <-cutree(tree, k=4, h=NULL)
num <- table(taglio)
tagliolist <- list(taglio)
agvar <- aggregate(tabella, tagliolist, var)[,-1]
trH1<-(num[[1]]-1) * sum(agvar[1,])
if(is.na(trH1))
trH1 <- 0
trH2<-(num[[2]]-1) * sum(agvar[2,])
if(is.na(trH2))
trH2 <- 0
trH3<-(num[[3]]-1) * sum(agvar[3,])
if(is.na(trH3))
trH3 <- 0
trH4<-(num[[4]]-1) * sum(agvar[4,])
if(is.na(trH4))
trH4 <- 0
trS <- trH1 + trH2 + trH3 + trH4
trB <- trHI-trH1-trH2-trH3-trH4
trB/trHI
cutree(hlm, k=4, h=NULL)
km <- kmeans(tabella, centers = 1, iter.max = 25, nstart = 10)
km
km <- kmeans(tabella, centers = 2, iter.max = 25, nstart = 10)
km
km <- kmeans(tabella, centers = 2, iter.max = 25, nstart = 10)
km
km$totss
km$tot.withinss
km$betweenss
km$betweenss/km$totss
km <- kmeans(tabella, centers = 3, iter.max = 25, nstart = 10)
km
km$totss
km$tot.withinss
km$betweenss
km$betweenss/km$totss
d<-dist(tabella, method="euclidean", diag = TRUE, upper = TRUE)
d2 <- d^2
tree <- hclust(d2, method = "centroid")
taglio <- cutree(tree, k = 3, h = NULL)
tagliolist <- list(taglio)
centroidiIniziali <- aggregate(tabella, tagliolist, mean)[,-1]
kmeans(tabella, centers = centroidiIniziali, iter.max = 25)
